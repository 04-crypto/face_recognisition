# -*- coding: utf-8 -*-
"""face_recognisition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1usR_mdYDcwhyCbp-FJQMjxij_hLHjNkp
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import cv2 as cv
import os
import numpy as np
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
from tensorflow.keras.optimizers import RMSprop

from google.colab import drive
drive.mount('/content/drive')

img = plt.imread("/content/drive/MyDrive/basedata/training/happy/1521564173542.jpg") 
plt.imshow(img)

cv.imread("/content/drive/MyDrive/basedata/training/happy/1521564173542.jpg")
#cv.imread("/content/drive/MyDrive/basedata/training/happy/1521564173542.jpg").shape

train = ImageDataGenerator(rescale=1/15)
validation = ImageDataGenerator(rescale=1/15)

train_dataset=train.flow_from_directory('/content/drive/MyDrive/basedata/training/',target_size=(200,200),batch_size=3,class_mode='binary')
validation_dataset=train.flow_from_directory('/content/drive/MyDrive/basedata/training/',target_size=(200,200),batch_size=3,class_mode='binary')

train_dataset.class_indices

model = tf.keras.models.Sequential([tf.keras.layers.Conv2D(16,(3,3),activation='relu',
                                    input_shape=(200,200,3)),tf.keras.layers.MaxPool2D(2,2),
                                    
                                    tf.keras.layers.Conv2D(32,(3,3),activation='relu'),
                                    tf.keras.layers.MaxPool2D(2,2),
                                        
                                    tf.keras.layers.Conv2D(64,(3,3),activation='relu'),
                                    tf.keras.layers.MaxPool2D(2,2),
 
                                    
                                    tf.keras.layers.Flatten(),
                                    tf.keras.layers.Dense(521,activation='relu'),
                                    tf.keras.layers.Dense(1,activation='sigmoid')
                                    ])
train_dataset.classes

model.compile(loss='binary_crossentropy',
             optimizer=RMSprop(lr=0.001),
              metrics=['accuracy'])

model_fit=model.fit(train_dataset,steps_per_epoch=5,epochs=50,validation_data=validation_dataset)

dir_path='/content/drive/MyDrive/basedata/test/'
for i in os.listdir(dir_path):
  img = image.load_img(dir_path+'//'+i,target_size=(200,200))
  plt.imshow(img)
  plt.show()
  X=image.img_to_array(img)
  X=np.expand_dims(X,axis=0)
  images=np.vstack([X])
  val=model.predict(images)
  if val==0:
   print("This Person is Happy :-)")
  else:
    print("This Person is sad :-<")



